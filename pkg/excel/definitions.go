package excel

import (
	"github.com/mark3labs/mcp-go/mcp"
)

// GetToolDefinitions returns all MCP tool definitions
func GetToolDefinitions() []mcp.Tool {
	return []mcp.Tool{
		mcp.NewTool("enumerate_columns",
			mcp.WithDescription("Enumerate all columns in an Excel spreadsheet"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
			mcp.WithString("sheet_name",
				mcp.Description("Name of the sheet (optional, defaults to current or first sheet)"),
			),
		),
		mcp.NewTool("enumerate_rows",
			mcp.WithDescription("Enumerate all rows in an Excel spreadsheet"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
			mcp.WithString("sheet_name",
				mcp.Description("Name of the sheet (optional, defaults to current or first sheet)"),
			),
		),
		mcp.NewTool("get_cell_value",
			mcp.WithDescription("Get the value of a specific cell in an Excel spreadsheet"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
			mcp.WithString("cell",
				mcp.Description("Cell reference (e.g., 'A1', 'B5')"),
				mcp.Required(),
			),
			mcp.WithString("sheet_name",
				mcp.Description("Name of the sheet (optional, defaults to current or first sheet)"),
			),
		),
		mcp.NewTool("get_range_values",
			mcp.WithDescription("Get values from a range of cells in an Excel spreadsheet"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
			mcp.WithString("range",
				mcp.Description("Range reference (e.g., 'A1:C3', 'B2:D10')"),
				mcp.Required(),
			),
			mcp.WithString("sheet_name",
				mcp.Description("Name of the sheet (optional, defaults to current or first sheet)"),
			),
		),
		mcp.NewTool("list_sheets",
			mcp.WithDescription("List all available sheets in an Excel spreadsheet"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
		),
		mcp.NewTool("set_current_sheet",
			mcp.WithDescription("Set the current active sheet for subsequent operations on a file"),
			mcp.WithReadOnlyHintAnnotation(false),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
			mcp.WithString("sheet_name",
				mcp.Description("Name of the sheet to set as current"),
				mcp.Required(),
			),
		),
		mcp.NewTool("get_column",
			mcp.WithDescription("Get all values in a specific column from an Excel spreadsheet"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
			mcp.WithString("column",
				mcp.Description("Column name (e.g., 'A', 'B', 'Z', 'AA')"),
				mcp.Required(),
			),
			mcp.WithString("sheet_name",
				mcp.Description("Name of the sheet (optional, defaults to current or first sheet)"),
			),
		),
		mcp.NewTool("get_row",
			mcp.WithDescription("Get all values in a specific row from an Excel spreadsheet"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
			mcp.WithNumber("row_number",
				mcp.Description("Row number (1-based, e.g., 1, 2, 3)"),
				mcp.Required(),
			),
			mcp.WithString("sheet_name",
				mcp.Description("Name of the sheet (optional, defaults to current or first sheet)"),
			),
		),
		mcp.NewTool("get_sheet_stats",
			mcp.WithDescription("Get statistical summary of an Excel sheet including row count, column count, non-empty cells, and data types"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
			mcp.WithString("sheet_name",
				mcp.Description("Name of the sheet (optional, defaults to current or first sheet)"),
			),
		),
		mcp.NewTool("flush_cache",
			mcp.WithDescription("Flush the Excel file cache, closing all open files and freeing memory"),
			mcp.WithReadOnlyHintAnnotation(false),
		),
		mcp.NewTool("explain_formula",
			mcp.WithDescription("Extract and explain a specific formula from an Excel cell, translating cell references to human-readable names based on headers"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithString("file_path",
				mcp.Description("Path to the Excel file"),
				mcp.Required(),
			),
			mcp.WithString("cell",
				mcp.Description("Cell reference (e.g., 'A1', 'B5')"),
				mcp.Required(),
			),
			mcp.WithString("sheet_name",
				mcp.Description("Name of the sheet (optional, defaults to current or first sheet)"),
			),
		),
	}
}
